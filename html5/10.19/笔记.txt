函数的三种声明方式

1.字面量声明

function a(){}

2.变量声明

var b = function (){}

3.构造函数声明

var b = new Function(参数)
	



可以传参  

1.body参数2

表示被实例化出来的函数体

2.arguments参数1

表示被实例化出来的函数对象他的形式参数

注：如果只传了一个参数，表示传入的是函数体

但是一般不推荐使用

因为过于繁琐

函数的四种调用

1.普通调用

a（）

2.方法调用方式

obj.a()

3.构造函数调用方式

var d = new c();

如何判断是否是构造函数调用方式  就看有没有new

4.上下文调用方式

call 和 apply是js中的两种方法，这两种方法的作用是立即执行当前函数， 并且改变当前函数的this指向

上下文调用方式会改变当前调用函数的this指向，call的使用方法是函数名.call（要改变的this指向，是一个对象类型的参数，fn的形参要接受的实参）

apply的作用和call是完全一样的，那么有什么不同呢

不同在于，apply的语法  fn.apply(要改变this的指向，[fn要接受的形参]),apply要传入的是个数组







也可以写成apply（null,[1,2,3]）

如果第一个参数传入null 那么表示this指向wendow对象





apply执行机制

空函数没有apply方法，apply前面不管是谁调用都不是问题，只要this的指向和前面的调用者无关，

在apply方法执行的时候，jsyinxing会自动把第二个参数（就是数组参数）里面的数组项的通过循环遍历方式拿出来，

这样实际上最后操作的还是数字（也就是数组项）

原型链的概念，在任何对象和object.prototype之间，存在这一条以非标准属性 -proto-进行链接的链，我们管这条链叫做原型链，

在默认情况下一个任意对象的原型的原型就是object.prototype


原型链上的查找机制

如果一个对象访问某个属性的时候

会先在该对象自身查找这个属性，如果找到，就直接拿值，

如果没找到，就向上一级的原型查找这个属性，如果拿到，就拿值

如果没拿到  继续向上一级原型查找，知道object.prototype为止

如果有值，就拿值，如果没有就返回undefinde









    var x = function(name){
               console.log(name);
               console.log(this.age);
           }
           var obj = {
               age:19
           }
           x.apply(a,["cht"])


如果x使用apply方法调用，第一个参数写的对象，那么x里的this就指向所输入的对象（就是this就是所输入的对象）









var c = new function(){}
