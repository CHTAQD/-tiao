普通函数如果没有调用  那他的this是没有指向的，而所有对象都是window的子对象，所以当函数没有调用时才指向window

函数没有调用，如果用new关键字改变this指向，则当前函数无this指向 然后谁调用他this就指向谁     就是this指向 实例化出来的对象

对象里面有函数存在谁调用函数this就指向谁  匿名函数产生了闭包也就是安全气泡只会访问到当前作用域内的变量

this指向window而a（）函数有闭包存在外部访问不了内部变量

此处只对v进行了函数体的赋值  并没有调用执行fn

有多层对象嵌套调用  当前函数this指向还是指向离他最近的对象

变量a创建了一个fn实例(相当于复制了一份fn到a里面)，但仅仅是创建并没有执行 而调用fn对象是a 所以this指向a对象

当解决this碰到return之类的问题中函数体内返回对象则this指向当前返回的对象  如果返回的是其他的东西则this还是指向实例化他的对象

null空对象比较特殊也是谁调用this指向就指向谁

在严格模式下默认的this不在指向window而是undefined