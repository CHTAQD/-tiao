javascript事件基础和事件绑定

一、事件驱动
    1.事件
      javascript侦测到的用户的操作或是页面的一些行为(怎么发生的)
    2.事件源
      引发事件的元素。(发生在谁的身上)
    3.事件处理程序
      对事件处理的程序或是函数 (发生了什么事)

二、事件的分类

  1.鼠标事件     
    onclick：鼠标点击事件
    ondblclick：鼠标双击事件
    onmousedown：鼠标按下事件
    onmouseup：鼠标抬起事件
    onmousemove：鼠标移动事件
    onmouseover：鼠标移入事件
    onmouseout：鼠标移出事件
    onmouseenter:鼠标进入事件（阻止了事件流）
   onmouseleave:鼠标离开事件
   事件流：事件的流程【子元素触发不了父元素的事件】
例：6+
box.onmouseover=function(){
    	console.log(1)
    }
    box.onmousemove=function(){
    	console.log(2)
    }
    box.onmouseout=function(){
    	console.log(3)
    }
 box.onmouseenter=function(){
    	console.log(4)
    }
     box.onmouseleave=function(){
    	console.log(5)
    }
 2.键盘事件（document）
   onkeyup：键盘抬起事件
   onkeydown：键盘按下事件
   onkeypress ：键盘按下或按住事件
例：
document.onkeydown=function(){
    	console.log(6)
    }
    document.onkeypress=function(){
    	console.log(7) 
    }
    document.onkeyup=function(){
    	console.log(8)
    }
 3.表单事件(表单)
  onsubmit：表单提交事件
  onblur：表单失去焦点事件
  onfoucs：表单获得焦点事件
  onchange：表单内容改变事件


 4.页面事件（window）
  onload：页面加载事件延迟
 onresize:窗口或框架被调整大小时发生的事件。
例：
 alert(1)
     window.onload=function(){
     	alert(2)
     }
     alert(3)
5.鼠标滚动事件0 
window.onscroll
三、如何绑定事件
  1.在脚本中绑定
eg1:box.onclick=function(){
 	alert(1)
    }
eg2:box.onclick=bb;
function aa(){
 	alert(1)
 }
  2.直接在HTML元素绑定
<div class="box" onclick="function bb(){alert(2)};bb()">

四、事件监听：
      同一个事件绑定多个事件处理程序
   IE:（不会删除匿名函数）
     对象.attachEvent("事件(on)","处理程序")  添加
     对象.detachEvent("事件(on)","处理程序")  删除
    
     FF:（不会删除匿名函数）
     对象.addEventListener("事件","处理程序",布尔值)   添加
     对象.removeEventListener("事件","处理程序",布尔值)  删除
  
注意：
addEventListener方法可以为当前对象的同一个事件，添加多个监听函数。这些函数按照添加顺序触发，即先添加先触发。如果为同一个事件多次添加同一个监听函数，该函数只会执行一次，多余的添加将自动被去除（不必使用removeEventListener方法手动去除）。

如果希望向监听函数传递参数，可以用匿名函数包装一下监听函数。
function print(x) {
  console.log(x);
}
var el = document.getElementById('div1');
el.addEventListener('click', function () { print('Hello'); }, false);
上面代码通过匿名函数，向监听函数print传递了一个参数。
     

   
EventListener

   